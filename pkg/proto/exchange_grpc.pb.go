// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: pkg/proto/exchange.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DzForex_GetRate_FullMethodName                = "/DzForex/GetRate"
	DzForex_GetAvailableCurrencies_FullMethodName = "/DzForex/GetAvailableCurrencies"
)

// DzForexClient is the client API for DzForex service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DzForexClient interface {
	GetRate(ctx context.Context, in *RateRequest, opts ...grpc.CallOption) (*RateResponse, error)
	GetAvailableCurrencies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AvailableCurrenciesResponse, error)
}

type dzForexClient struct {
	cc grpc.ClientConnInterface
}

func NewDzForexClient(cc grpc.ClientConnInterface) DzForexClient {
	return &dzForexClient{cc}
}

func (c *dzForexClient) GetRate(ctx context.Context, in *RateRequest, opts ...grpc.CallOption) (*RateResponse, error) {
	out := new(RateResponse)
	err := c.cc.Invoke(ctx, DzForex_GetRate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dzForexClient) GetAvailableCurrencies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AvailableCurrenciesResponse, error) {
	out := new(AvailableCurrenciesResponse)
	err := c.cc.Invoke(ctx, DzForex_GetAvailableCurrencies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DzForexServer is the server API for DzForex service.
// All implementations must embed UnimplementedDzForexServer
// for forward compatibility
type DzForexServer interface {
	GetRate(context.Context, *RateRequest) (*RateResponse, error)
	GetAvailableCurrencies(context.Context, *emptypb.Empty) (*AvailableCurrenciesResponse, error)
	mustEmbedUnimplementedDzForexServer()
}

// UnimplementedDzForexServer must be embedded to have forward compatible implementations.
type UnimplementedDzForexServer struct {
}

func (UnimplementedDzForexServer) GetRate(context.Context, *RateRequest) (*RateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRate not implemented")
}
func (UnimplementedDzForexServer) GetAvailableCurrencies(context.Context, *emptypb.Empty) (*AvailableCurrenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableCurrencies not implemented")
}
func (UnimplementedDzForexServer) mustEmbedUnimplementedDzForexServer() {}

// UnsafeDzForexServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DzForexServer will
// result in compilation errors.
type UnsafeDzForexServer interface {
	mustEmbedUnimplementedDzForexServer()
}

func RegisterDzForexServer(s grpc.ServiceRegistrar, srv DzForexServer) {
	s.RegisterService(&DzForex_ServiceDesc, srv)
}

func _DzForex_GetRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DzForexServer).GetRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DzForex_GetRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DzForexServer).GetRate(ctx, req.(*RateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DzForex_GetAvailableCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DzForexServer).GetAvailableCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DzForex_GetAvailableCurrencies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DzForexServer).GetAvailableCurrencies(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// DzForex_ServiceDesc is the grpc.ServiceDesc for DzForex service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DzForex_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DzForex",
	HandlerType: (*DzForexServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRate",
			Handler:    _DzForex_GetRate_Handler,
		},
		{
			MethodName: "GetAvailableCurrencies",
			Handler:    _DzForex_GetAvailableCurrencies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/exchange.proto",
}
